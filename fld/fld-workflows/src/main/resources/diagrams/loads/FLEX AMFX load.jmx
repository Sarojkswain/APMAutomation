<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="FLEX AMFX load" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="logDir" elementType="Argument">
            <stringProp name="Argument.name">logDir</stringProp>
            <stringProp name="Argument.value">${__P(logDir,.)}</stringProp>
            <stringProp name="Argument.desc">directory for logs produced by this test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="concurrency" elementType="Argument">
            <stringProp name="Argument.name">concurrency</stringProp>
            <stringProp name="Argument.value">${__P(concurrency,1)}</stringProp>
            <stringProp name="Argument.desc">number of threads/clients to run</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetHost" elementType="Argument">
            <stringProp name="Argument.name">targetHost</stringProp>
            <stringProp name="Argument.value">${__P(targetHost,fldcornerbow01c)}</stringProp>
            <stringProp name="Argument.desc">target BlazeDS host</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetPort" elementType="Argument">
            <stringProp name="Argument.name">targetPort</stringProp>
            <stringProp name="Argument.value">${__P(targetPort,8400)}</stringProp>
            <stringProp name="Argument.desc">target host port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetPath" elementType="Argument">
            <stringProp name="Argument.name">targetPath</stringProp>
            <stringProp name="Argument.value">${__P(targetPath,flex-echo-app/messagebroker/http)}</stringProp>
            <stringProp name="Argument.desc">target web service path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loremIpsumWords" elementType="Argument">
            <stringProp name="Argument.name">loremIpsumWords</stringProp>
            <stringProp name="Argument.value">${__P(loremIpsumWords,2000)}</stringProp>
            <stringProp name="Argument.desc">how many words of &quot;lorem ipsum&quot; to use as payload</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="echoSerivceCallsCount" elementType="Argument">
            <stringProp name="Argument.name">echoSerivceCallsCount</stringProp>
            <stringProp name="Argument.value">${__P(echoSerivceCallsCount, 1)}</stringProp>
            <stringProp name="Argument.desc">how many echoService.echo calls to do</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loops" elementType="Argument">
            <stringProp name="Argument.name">loops</stringProp>
            <stringProp name="Argument.value">${__P(loops,5000)}</stringProp>
            <stringProp name="Argument.desc">how many loops of the whole test to do</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cycleDelay" elementType="Argument">
            <stringProp name="Argument.name">cycleDelay</stringProp>
            <stringProp name="Argument.value">${__P(cycleDelay,5000)}</stringProp>
            <stringProp name="Argument.desc">delay between test cycles (ms)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loops}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${concurrency}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1437489128000</longProp>
        <longProp name="ThreadGroup.end_time">1437489128000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - test echoService.echo" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">com.ca.apm.systemtest.fld.flex.load.amfx</stringProp>
          <stringProp name="script">package com.ca.systemtest.fld.flex.amfx.echo.client

import de.svenjacobs.loremipsum.LoremIpsum
import flex.messaging.io.*
import flex.messaging.io.amf.ActionContext
import flex.messaging.io.amf.ActionMessage
import flex.messaging.io.amf.AmfTrace
import flex.messaging.io.amf.MessageBody
import flex.messaging.io.amfx.AmfxMessageDeserializer
import flex.messaging.io.amfx.AmfxMessageSerializer
import flex.messaging.messages.CommandMessage
import flex.messaging.messages.Message
import flex.messaging.messages.RemotingMessage
import flex.messaging.util.UUIDUtils
import groovy.util.logging.Commons
import org.apache.commons.io.IOUtils
import org.apache.http.HttpEntity
import org.apache.http.HttpHeaders
import org.apache.http.HttpResponse
import org.apache.http.HttpStatus
import org.apache.http.client.HttpClient
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.ContentType
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.client.LaxRedirectStrategy

import java.nio.charset.StandardCharsets

@Commons
class Client {
    static def String serializeMessage(Message message, SerializationContext serializationContext) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        MessageSerializer messageSerializer = new AmfxMessageSerializer();
        messageSerializer.initialize(serializationContext, outputStream, new AmfTrace());

        ActionMessage requestMessage = new ActionMessage(MessageIOConstants.AMF3);
        MessageBody body = new MessageBody(&quot;&quot;, &quot;&quot;, message);
        requestMessage.addBody(body);

        messageSerializer.writeMessage(requestMessage);
        log.debug(&quot;result AMFX:\n&quot; + outputStream.toString(StandardCharsets.UTF_8.name()));

        return outputStream.toString(StandardCharsets.UTF_8.name());
    }

    static def Message deserializeMessage(String responseBody, SerializationContext serializationContext) {
        MessageDeserializer deserializer = new AmfxMessageDeserializer();
        deserializer.initialize(serializationContext,
            IOUtils.toInputStream(responseBody), new AmfTrace());

        ActionMessage actionMessage = new ActionMessage();
        ActionContext actionContext = new ActionContext();
        actionContext.setResponseMessage(actionMessage);
        deserializer.readMessage(actionMessage, actionContext);
        if (actionMessage.getBodyCount() != 1) {
            log.info(&quot;unexpected body count of &quot; + actionMessage.getBodyCount());
        }
        MessageBody messageBody = actionMessage.getBody(0);
        Message message = messageBody.getDataAsMessage();
        return message;
    }

    static def HttpPost prepPost(Message message, URI targetUri, SerializationContext serializationContext) {
        String cmdMsgPostBody = serializeMessage(message, serializationContext);
        HttpPost postRequest = new HttpPost(targetUri);
        postRequest.setEntity(
            new StringEntity(cmdMsgPostBody,
                ContentType.create(&quot;application/xml&quot;, StandardCharsets.UTF_8.name())));
        postRequest.setHeader(HttpHeaders.CONTENT_TYPE, &quot;application/xml&quot;);
        return postRequest;
    }

    static def String printHttpEntity(HttpEntity entity) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream(4096);
        HttpEntity clone = entity.clone();
        clone.writeTo(baos);
        return baos.toString(StandardCharsets.UTF_8.name());
    }    

    static void main(org.apache.jmeter.samplers.SampleResult sampleResult, String... args) {
        String targetHost = args[0]; //&quot;127.0.0.1&quot;;
        String targetPort = args[1]; // &quot;8080&quot;;
        String targetPath = args[2]; //&quot;/flex-echo-app/messagebroker/http&quot;
        int loremIpsumWords = Integer.parseInt(args[3]); //2000;
        int loops = Integer.parseInt(args[4]); //10;

        org.apache.jmeter.samplers.SampleResult pingResult = new org.apache.jmeter.samplers.SampleResult();
        pingResult.setSampleLabel(&quot;Ping request&quot;);
        pingResult.setSuccessful(true);

        String clientId = UUIDUtils.createUUID();
        CommandMessage cmdMsg = new CommandMessage(CommandMessage.CLIENT_PING_OPERATION);
        cmdMsg.setHeader(&quot;DSMessagingVersion&quot;, 1);
        cmdMsg.setMessageId(UUIDUtils.createUUID());
        cmdMsg.setHeader(Message.FLEX_CLIENT_ID_HEADER, &quot;nil&quot;);
        cmdMsg.setClientId(clientId);
        pingResult.setRequestHeaders(cmdMsg.toString());

        SerializationContext serializationContext = SerializationContext.getSerializationContext();
        serializationContext.createASObjectForMissingType = true;
        ClassAliasRegistry aliases = ClassAliasRegistry.getRegistry();
        // This causes errors in XStream during proxy sampling (cannot cast byte to string)
        aliases.registerAlias(&quot;DSC&quot;, &quot;flex.messaging.messages.CommandMessageExt&quot;);
        aliases.registerAlias(&quot;DSK&quot;, &quot;flex.messaging.messages.AcknowledgeMessageExt&quot;);

        LoremIpsum loremIpsum = new LoremIpsum();
        URI targetUri = new URI(
            String.format(&quot;http://%s:%s/%s&quot;, targetHost, targetPort, targetPath));
        HttpClient httpClient = new DefaultHttpClient();
        try {
            httpClient.setRedirectStrategy(new LaxRedirectStrategy());

            // PING request

            HttpPost postRequest = prepPost(cmdMsg, targetUri, serializationContext);
            HttpEntity postEntity = postRequest.getEntity();
            String postRequestText = printHttpEntity(postEntity);
            pingResult.setRequestHeaders(postRequestText);
            
            pingResult.sampleStart();
            HttpResponse response = httpClient.execute(postRequest);
            pingResult.sampleEnd();

            String dsid = null;
            try {
                log.debug(&quot;ping request HTTP response status line: &quot; + response.getStatusLine().toString());

                HttpEntity responseEntity = response.getEntity();
                String pingResponseBody = IOUtils.toString(
                    responseEntity.getContent(), StandardCharsets.UTF_8);
                pingResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);
                pingResult.setResponseData(pingResponseBody, StandardCharsets.UTF_8.name());

                if (response.getStatusLine().statusCode != HttpStatus.SC_OK) {
                    log.error(&quot;HTTP response indicated failure: &quot; + response.getStatusLine().toString());
                    pingResult.setSuccessful(false);
                }
                log.debug(&quot;content:\n&quot; + pingResponseBody);

                Message message = deserializeMessage(pingResponseBody, serializationContext);
                dsid = (String) message.getHeader(Message.FLEX_CLIENT_ID_HEADER);
                log.info(&quot;DSId from AMFX: &quot; + dsid);
                if (dsid == null) {
                    log.error(&quot;Message does not contain DSId header.&quot;);
                    pingResult.setSuccessful(false);
                }

                sampleResult.addRawSubResult(pingResult);
            } finally {
                response.getEntity().getContent().close();
            }

            // echoService.echo request

            String data = loremIpsum.getWords(loremIpsumWords);
            for (int i = 0; i != loops; ++i) {
			RemotingMessage echoMessage = new RemotingMessage();
			echoMessage.setOperation(&quot;echo&quot;);
			echoMessage.setDestination(&quot;echoService&quot;);
			echoMessage.setMessageId(UUIDUtils.createUUID());
			echoMessage.setHeader(&quot;DSMessagingVersion&quot;, 1);
			echoMessage.setHeader(Message.FLEX_CLIENT_ID_HEADER, dsid);
			echoMessage.setBody(data);
			echoMessage.setClientId(clientId);
            	
			org.apache.jmeter.samplers.SampleResult echoResult = new org.apache.jmeter.samplers.SampleResult();
			echoResult.setSuccessful(true);
			echoResult.setRequestHeaders(echoMessage.toString());
			echoResult.setSampleLabel(&quot;Echo request #&quot; + i);
            	
                log.info(&quot;echo message &quot; + Integer.toString(i));
                echoMessage.setMessageId(UUIDUtils.createUUID());
                postRequest = prepPost(echoMessage, targetUri, serializationContext);
                response = httpClient.execute(postRequest);
                try {
                    HttpEntity responseEntity = response.getEntity();
                    String echoResponseBody = IOUtils.toString(responseEntity.getContent(), StandardCharsets.UTF_8);
                    echoResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);
                    echoResult.setResponseData(echoResponseBody, StandardCharsets.UTF_8.name());

                    if (response.getStatusLine().statusCode != HttpStatus.SC_OK) {
                        log.error(&quot;HTTP response indicated failure: &quot; + response.getStatusLine().toString());
                        echoResult.setSuccessful(false);
                    }
                    log.debug(&quot;content:\n&quot; + echoResponseBody);

                    Message message = deserializeMessage(echoResponseBody, serializationContext);
                    log.debug(&quot;echo response message:\n&quot; + message.toString());
                    sampleResult.addRawSubResult(echoResult);
                } finally {
                    response.getEntity().getContent().close();
                }
            }
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
    }
}

Client.main(SampleResult, vars.get(&quot;targetHost&quot;), vars.get(&quot;targetPort&quot;), vars.get(&quot;targetPath&quot;),
	vars.get(&quot;loremIpsumWords&quot;), vars.get(&quot;echoSerivceCallsCount&quot;));
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${cycleDelay}</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${logDir}/${__TestPlanName()}-${__time(YMDHMS)}.results.xml</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
